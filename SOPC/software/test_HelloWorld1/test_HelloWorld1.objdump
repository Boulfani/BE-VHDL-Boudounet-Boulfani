
test_HelloWorld1.elf:     file format elf32-littlenios2
test_HelloWorld1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x0000040c memsz 0x0000040c flags r-x
    LOAD off    0x0000142c vaddr 0x0000842c paddr 0x00008430 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x00001434 vaddr 0x00008434 paddr 0x00008434 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000003f4  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  00008414  00008414  00001414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000004  0000842c  00008430  0000142c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000000c  00008434  00008434  00001434  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001e8  00000000  00000000  00001458  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000261  00000000  00000000  00001640  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000e34  00000000  00000000  000018a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000745  00000000  00000000  000026d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001dc3  00000000  00000000  00002e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000260  00000000  00000000  00004be0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000006d3  00000000  00000000  00004e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000039f  00000000  00000000  00005513  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000040  00000000  00000000  000058b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000020  00000000  00000000  000058f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0000673d  2**0
                  CONTENTS, READONLY
 17 .cpu          00000005  00000000  00000000  00006740  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  00006745  2**0
                  CONTENTS, READONLY
 19 .stderr_dev   0000000b  00000000  00000000  00006746  2**0
                  CONTENTS, READONLY
 20 .stdin_dev    0000000b  00000000  00000000  00006751  2**0
                  CONTENTS, READONLY
 21 .stdout_dev   0000000b  00000000  00000000  0000675c  2**0
                  CONTENTS, READONLY
 22 .sopc_system_name 0000000f  00000000  00000000  00006767  2**0
                  CONTENTS, READONLY
 23 .quartus_project_dir 0000003b  00000000  00000000  00006776  2**0
                  CONTENTS, READONLY
 24 .jdi          00004234  00000000  00000000  000067b1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .text	00000000 .text
00008414 l    d  .rodata	00000000 .rodata
0000842c l    d  .rwdata	00000000 .rwdata
00008434 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 HelloWorld.c
00000000 l    df *ABS*	00000000 alt_load.c
00008088 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00008290 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00008114 g     F .text	0000002c alt_main
00008430 g       *ABS*	00000000 __flash_rwdata_start
00008140 g     F .text	00000038 alt_putstr
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00008438 g     O .bss	00000004 alt_argv
0001042c g       *ABS*	00000000 _gp
00008178 g     F .text	00000004 usleep
00008268 g     F .text	00000008 altera_nios2_irq_init
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000083cc g     F .text	00000008 __udivsi3
00008440 g       *ABS*	00000000 __bss_end
00008260 g     F .text	00000004 alt_dcache_flush_all
00008430 g       *ABS*	00000000 __ram_rwdata_end
0000842c g       *ABS*	00000000 __ram_rodata_end
0000842c g     O .rwdata	00000004 jtag_uart_0
000083d4 g     F .text	00000008 __umodsi3
00008440 g       *ABS*	00000000 end
0000ce20 g       *ABS*	00000000 __alt_stack_pointer
000081a0 g     F .text	00000034 altera_avalon_jtag_uart_write
00008020 g     F .text	0000003c _start
0000817c g     F .text	00000004 alt_sys_init
000083dc g     F .text	00000038 __mulsi3
0000842c g       *ABS*	00000000 __ram_rwdata_start
00008414 g       *ABS*	00000000 __ram_rodata_start
000081d4 g     F .text	0000008c alt_busy_sleep
00008440 g       *ABS*	00000000 __alt_stack_base
00008434 g       *ABS*	00000000 __bss_start
0000805c g     F .text	0000002c main
0000843c g     O .bss	00000004 alt_envp
0000830c g     F .text	00000060 __divsi3
00008414 g       *ABS*	00000000 __flash_rodata_start
00008180 g     F .text	00000020 alt_irq_init
00008434 g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008430 g       *ABS*	00000000 _edata
00008440 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
0000800c g       .entry	00000000 exit
0000836c g     F .text	00000060 __modsi3
0000ce20 g       *ABS*	00000000 __alt_data_end
0000800c g       .entry	00000000 _exit
00008270 g     F .text	00000020 strlen
00008264 g     F .text	00000004 alt_icache_flush_all
000080a8 g     F .text	0000006c alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def38814 	ori	sp,sp,52768

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6810b14 	ori	gp,gp,1068
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a10d14 	ori	r2,r2,33844

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e11014 	ori	r3,r3,33856

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00080a80 	call	80a8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00081140 	call	8114 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <main>:
#include "unistd.h"
#include "system.h"
#include <stdlib.h>
#include <stdio.h>
int main()
{ 
    805c:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
    8060:	01000074 	movhi	r4,1
    8064:	21210504 	addi	r4,r4,-31724
#include "unistd.h"
#include "system.h"
#include <stdlib.h>
#include <stdio.h>
int main()
{ 
    8068:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
    806c:	00081400 	call	8140 <alt_putstr>

  /* Event loop never exits. */
  while (1){
  alt_putstr("Hello from Nios II!\n");
    8070:	01000074 	movhi	r4,1
    8074:	21210504 	addi	r4,r4,-31724
    8078:	00081400 	call	8140 <alt_putstr>
  usleep(1000);
    807c:	0100fa04 	movi	r4,1000
    8080:	00081780 	call	8178 <usleep>
    8084:	003ffa06 	br	8070 <main+0x14>

00008088 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8088:	2900051e 	bne	r5,r4,80a0 <alt_load_section+0x18>
    808c:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    8090:	20800017 	ldw	r2,0(r4)
    8094:	21000104 	addi	r4,r4,4
    8098:	28800015 	stw	r2,0(r5)
    809c:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    80a0:	29bffb1e 	bne	r5,r6,8090 <alt_load_section+0x8>
    80a4:	f800283a 	ret

000080a8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    80a8:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    80ac:	01000074 	movhi	r4,1
    80b0:	21210c04 	addi	r4,r4,-31696
    80b4:	01400074 	movhi	r5,1
    80b8:	29610b04 	addi	r5,r5,-31700
    80bc:	01800074 	movhi	r6,1
    80c0:	31a10c04 	addi	r6,r6,-31696
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    80c4:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    80c8:	00080880 	call	8088 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    80cc:	01000074 	movhi	r4,1
    80d0:	21200804 	addi	r4,r4,-32736
    80d4:	01400074 	movhi	r5,1
    80d8:	29600804 	addi	r5,r5,-32736
    80dc:	01800074 	movhi	r6,1
    80e0:	31a00804 	addi	r6,r6,-32736
    80e4:	00080880 	call	8088 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    80e8:	01000074 	movhi	r4,1
    80ec:	21210504 	addi	r4,r4,-31724
    80f0:	01400074 	movhi	r5,1
    80f4:	29610504 	addi	r5,r5,-31724
    80f8:	01800074 	movhi	r6,1
    80fc:	31a10b04 	addi	r6,r6,-31700
    8100:	00080880 	call	8088 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8104:	00082600 	call	8260 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8108:	dfc00017 	ldw	ra,0(sp)
    810c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8110:	00082641 	jmpi	8264 <alt_icache_flush_all>

00008114 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8114:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8118:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    811c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8120:	00081800 	call	8180 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8124:	000817c0 	call	817c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8128:	d1200217 	ldw	r4,-32760(gp)
    812c:	d1600317 	ldw	r5,-32756(gp)
    8130:	d1a00417 	ldw	r6,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8134:	dfc00017 	ldw	ra,0(sp)
    8138:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    813c:	000805c1 	jmpi	805c <main>

00008140 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    8140:	defffe04 	addi	sp,sp,-8
    8144:	dc000015 	stw	r16,0(sp)
    8148:	dfc00115 	stw	ra,4(sp)
    814c:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8150:	00082700 	call	8270 <strlen>
    8154:	800b883a 	mov	r5,r16
    8158:	100d883a 	mov	r6,r2
    815c:	01000074 	movhi	r4,1
    8160:	21210b04 	addi	r4,r4,-31700
    8164:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
    8168:	dfc00117 	ldw	ra,4(sp)
    816c:	dc000017 	ldw	r16,0(sp)
    8170:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8174:	00081a01 	jmpi	81a0 <altera_avalon_jtag_uart_write>

00008178 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    8178:	00081d41 	jmpi	81d4 <alt_busy_sleep>

0000817c <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
}
    817c:	f800283a 	ret

00008180 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8180:	deffff04 	addi	sp,sp,-4
    8184:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
    8188:	00082680 	call	8268 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    818c:	00800044 	movi	r2,1
    8190:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8194:	dfc00017 	ldw	ra,0(sp)
    8198:	dec00104 	addi	sp,sp,4
    819c:	f800283a 	ret

000081a0 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    81a0:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
    81a4:	298f883a 	add	r7,r5,r6
    81a8:	20c00104 	addi	r3,r4,4
    81ac:	00000606 	br	81c8 <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    81b0:	18800037 	ldwio	r2,0(r3)
    81b4:	10bfffec 	andhi	r2,r2,65535
    81b8:	10000326 	beq	r2,zero,81c8 <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    81bc:	28800007 	ldb	r2,0(r5)
    81c0:	29400044 	addi	r5,r5,1
    81c4:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    81c8:	29fff936 	bltu	r5,r7,81b0 <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    81cc:	3005883a 	mov	r2,r6
    81d0:	f800283a 	ret

000081d4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    81d4:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    81d8:	014666b4 	movhi	r5,6554
    81dc:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    81e0:	dc000015 	stw	r16,0(sp)
    81e4:	dfc00115 	stw	ra,4(sp)
    81e8:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    81ec:	00083cc0 	call	83cc <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    81f0:	10001126 	beq	r2,zero,8238 <alt_busy_sleep+0x64>
    81f4:	0007883a 	mov	r3,zero
    81f8:	01200034 	movhi	r4,32768
    81fc:	213fffc4 	addi	r4,r4,-1
    8200:	017999b4 	movhi	r5,58982
    8204:	295999c4 	addi	r5,r5,26215
    8208:	00000406 	br	821c <alt_busy_sleep+0x48>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    820c:	213fffc4 	addi	r4,r4,-1
    8210:	203ffe1e 	bne	r4,zero,820c <alt_busy_sleep+0x38>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8214:	8161883a 	add	r16,r16,r5
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    8218:	18c00044 	addi	r3,r3,1
    821c:	18bffb16 	blt	r3,r2,820c <alt_busy_sleep+0x38>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8220:	8009883a 	mov	r4,r16
    8224:	01400144 	movi	r5,5
    8228:	00083dc0 	call	83dc <__mulsi3>
    822c:	10bfffc4 	addi	r2,r2,-1
    8230:	103ffe1e 	bne	r2,zero,822c <alt_busy_sleep+0x58>
    8234:	00000506 	br	824c <alt_busy_sleep+0x78>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8238:	8009883a 	mov	r4,r16
    823c:	01400144 	movi	r5,5
    8240:	00083dc0 	call	83dc <__mulsi3>
    8244:	10bfffc4 	addi	r2,r2,-1
    8248:	00bffe16 	blt	zero,r2,8244 <alt_busy_sleep+0x70>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    824c:	0005883a 	mov	r2,zero
    8250:	dfc00117 	ldw	ra,4(sp)
    8254:	dc000017 	ldw	r16,0(sp)
    8258:	dec00204 	addi	sp,sp,8
    825c:	f800283a 	ret

00008260 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    8260:	f800283a 	ret

00008264 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    8264:	f800283a 	ret

00008268 <altera_nios2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    8268:	000170fa 	wrctl	ienable,zero
}
    826c:	f800283a 	ret

00008270 <strlen>:
    8270:	20800007 	ldb	r2,0(r4)
    8274:	10000526 	beq	r2,zero,828c <strlen+0x1c>
    8278:	2007883a 	mov	r3,r4
    827c:	18c00044 	addi	r3,r3,1
    8280:	18800007 	ldb	r2,0(r3)
    8284:	103ffd1e 	bne	r2,zero,827c <strlen+0xc>
    8288:	1905c83a 	sub	r2,r3,r4
    828c:	f800283a 	ret

00008290 <udivmodsi4>:
    8290:	29001b2e 	bgeu	r5,r4,8300 <udivmodsi4+0x70>
    8294:	28001a16 	blt	r5,zero,8300 <udivmodsi4+0x70>
    8298:	00800044 	movi	r2,1
    829c:	0007883a 	mov	r3,zero
    82a0:	01c007c4 	movi	r7,31
    82a4:	00000306 	br	82b4 <udivmodsi4+0x24>
    82a8:	19c01326 	beq	r3,r7,82f8 <udivmodsi4+0x68>
    82ac:	18c00044 	addi	r3,r3,1
    82b0:	28000416 	blt	r5,zero,82c4 <udivmodsi4+0x34>
    82b4:	294b883a 	add	r5,r5,r5
    82b8:	1085883a 	add	r2,r2,r2
    82bc:	293ffa36 	bltu	r5,r4,82a8 <udivmodsi4+0x18>
    82c0:	10000d26 	beq	r2,zero,82f8 <udivmodsi4+0x68>
    82c4:	0007883a 	mov	r3,zero
    82c8:	21400236 	bltu	r4,r5,82d4 <udivmodsi4+0x44>
    82cc:	2149c83a 	sub	r4,r4,r5
    82d0:	1886b03a 	or	r3,r3,r2
    82d4:	1004d07a 	srli	r2,r2,1
    82d8:	280ad07a 	srli	r5,r5,1
    82dc:	103ffa1e 	bne	r2,zero,82c8 <udivmodsi4+0x38>
    82e0:	30000226 	beq	r6,zero,82ec <udivmodsi4+0x5c>
    82e4:	2005883a 	mov	r2,r4
    82e8:	f800283a 	ret
    82ec:	1809883a 	mov	r4,r3
    82f0:	2005883a 	mov	r2,r4
    82f4:	f800283a 	ret
    82f8:	0007883a 	mov	r3,zero
    82fc:	003ff806 	br	82e0 <udivmodsi4+0x50>
    8300:	00800044 	movi	r2,1
    8304:	0007883a 	mov	r3,zero
    8308:	003fef06 	br	82c8 <udivmodsi4+0x38>

0000830c <__divsi3>:
    830c:	defffe04 	addi	sp,sp,-8
    8310:	dc000015 	stw	r16,0(sp)
    8314:	dfc00115 	stw	ra,4(sp)
    8318:	0021883a 	mov	r16,zero
    831c:	20000c16 	blt	r4,zero,8350 <__divsi3+0x44>
    8320:	000d883a 	mov	r6,zero
    8324:	28000e16 	blt	r5,zero,8360 <__divsi3+0x54>
    8328:	00082900 	call	8290 <udivmodsi4>
    832c:	1007883a 	mov	r3,r2
    8330:	8005003a 	cmpeq	r2,r16,zero
    8334:	1000011e 	bne	r2,zero,833c <__divsi3+0x30>
    8338:	00c7c83a 	sub	r3,zero,r3
    833c:	1805883a 	mov	r2,r3
    8340:	dfc00117 	ldw	ra,4(sp)
    8344:	dc000017 	ldw	r16,0(sp)
    8348:	dec00204 	addi	sp,sp,8
    834c:	f800283a 	ret
    8350:	0109c83a 	sub	r4,zero,r4
    8354:	04000044 	movi	r16,1
    8358:	000d883a 	mov	r6,zero
    835c:	283ff20e 	bge	r5,zero,8328 <__divsi3+0x1c>
    8360:	014bc83a 	sub	r5,zero,r5
    8364:	8021003a 	cmpeq	r16,r16,zero
    8368:	003fef06 	br	8328 <__divsi3+0x1c>

0000836c <__modsi3>:
    836c:	deffff04 	addi	sp,sp,-4
    8370:	dfc00015 	stw	ra,0(sp)
    8374:	01800044 	movi	r6,1
    8378:	2807883a 	mov	r3,r5
    837c:	20000416 	blt	r4,zero,8390 <__modsi3+0x24>
    8380:	28000c16 	blt	r5,zero,83b4 <__modsi3+0x48>
    8384:	dfc00017 	ldw	ra,0(sp)
    8388:	dec00104 	addi	sp,sp,4
    838c:	00082901 	jmpi	8290 <udivmodsi4>
    8390:	0109c83a 	sub	r4,zero,r4
    8394:	28000b16 	blt	r5,zero,83c4 <__modsi3+0x58>
    8398:	180b883a 	mov	r5,r3
    839c:	01800044 	movi	r6,1
    83a0:	00082900 	call	8290 <udivmodsi4>
    83a4:	0085c83a 	sub	r2,zero,r2
    83a8:	dfc00017 	ldw	ra,0(sp)
    83ac:	dec00104 	addi	sp,sp,4
    83b0:	f800283a 	ret
    83b4:	014bc83a 	sub	r5,zero,r5
    83b8:	dfc00017 	ldw	ra,0(sp)
    83bc:	dec00104 	addi	sp,sp,4
    83c0:	00082901 	jmpi	8290 <udivmodsi4>
    83c4:	0147c83a 	sub	r3,zero,r5
    83c8:	003ff306 	br	8398 <__modsi3+0x2c>

000083cc <__udivsi3>:
    83cc:	000d883a 	mov	r6,zero
    83d0:	00082901 	jmpi	8290 <udivmodsi4>

000083d4 <__umodsi3>:
    83d4:	01800044 	movi	r6,1
    83d8:	00082901 	jmpi	8290 <udivmodsi4>

000083dc <__mulsi3>:
    83dc:	20000a26 	beq	r4,zero,8408 <__mulsi3+0x2c>
    83e0:	0007883a 	mov	r3,zero
    83e4:	2080004c 	andi	r2,r4,1
    83e8:	1005003a 	cmpeq	r2,r2,zero
    83ec:	2008d07a 	srli	r4,r4,1
    83f0:	1000011e 	bne	r2,zero,83f8 <__mulsi3+0x1c>
    83f4:	1947883a 	add	r3,r3,r5
    83f8:	294b883a 	add	r5,r5,r5
    83fc:	203ff91e 	bne	r4,zero,83e4 <__mulsi3+0x8>
    8400:	1805883a 	mov	r2,r3
    8404:	f800283a 	ret
    8408:	0007883a 	mov	r3,zero
    840c:	1805883a 	mov	r2,r3
    8410:	f800283a 	ret


SOPC-fibal2.elf:     file format elf32-littlenios2
SOPC-fibal2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000004cc memsz 0x000004cc flags r-x
    LOAD off    0x000014ec vaddr 0x000084ec paddr 0x000084f8 align 2**12
         filesz 0x0000000c memsz 0x0000000c flags rw-
    LOAD off    0x00001504 vaddr 0x00008504 paddr 0x00008504 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000488  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  000084a8  000084a8  000014a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       0000000c  000084ec  000084f8  000014ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000000c  00008504  00008504  00001504  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  000014f8  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001e8  00000000  00000000  00001520  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000276  00000000  00000000  00001708  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000e77  00000000  00000000  0000197e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000766  00000000  00000000  000027f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001df2  00000000  00000000  00002f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000260  00000000  00000000  00004d50  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000703  00000000  00000000  00004fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000039f  00000000  00000000  000056b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000040  00000000  00000000  00005a54  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000020  00000000  00000000  00005a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000069ad  2**0
                  CONTENTS, READONLY
 17 .cpu          00000005  00000000  00000000  000069b0  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  000069b5  2**0
                  CONTENTS, READONLY
 19 .sysid_hash   00000004  00000000  00000000  000069b6  2**0
                  CONTENTS, READONLY
 20 .sysid_base   00000004  00000000  00000000  000069ba  2**0
                  CONTENTS, READONLY
 21 .sysid_time   00000004  00000000  00000000  000069be  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  000069c2  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  000069cd  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  000069d8  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000f  00000000  00000000  000069e3  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000004e  00000000  00000000  000069f2  2**0
                  CONTENTS, READONLY
 27 .jdi          00004234  00000000  00000000  00006a40  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .text	00000000 .text
000084a8 l    d  .rodata	00000000 .rodata
000084ec l    d  .rwdata	00000000 .rwdata
00008504 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
0000811c l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00008324 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
000081a8 g     F .text	0000002c alt_main
000084f8 g       *ABS*	00000000 __flash_rwdata_start
000081d4 g     F .text	00000038 alt_putstr
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00008508 g     O .bss	00000004 alt_argv
000104ec g       *ABS*	00000000 _gp
0000820c g     F .text	00000004 usleep
000082fc g     F .text	00000008 altera_nios2_irq_init
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008460 g     F .text	00000008 __udivsi3
00008510 g       *ABS*	00000000 __bss_end
000082f4 g     F .text	00000004 alt_dcache_flush_all
000084f8 g       *ABS*	00000000 __ram_rwdata_end
000084ec g       *ABS*	00000000 __ram_rodata_end
000084f4 g     O .rwdata	00000004 jtag_uart_0
00008468 g     F .text	00000008 __umodsi3
00008510 g       *ABS*	00000000 end
000084f0 g     O .rwdata	00000004 leds
0000d000 g       *ABS*	00000000 __alt_stack_pointer
00008234 g     F .text	00000034 altera_avalon_jtag_uart_write
00008020 g     F .text	0000003c _start
00008210 g     F .text	00000004 alt_sys_init
00008470 g     F .text	00000038 __mulsi3
000084ec g       *ABS*	00000000 __ram_rwdata_start
000084a8 g       *ABS*	00000000 __ram_rodata_start
00008268 g     F .text	0000008c alt_busy_sleep
00008510 g       *ABS*	00000000 __alt_stack_base
00008504 g       *ABS*	00000000 __bss_start
0000805c g     F .text	000000c0 main
0000850c g     O .bss	00000004 alt_envp
000083a0 g     F .text	00000060 __divsi3
000084a8 g       *ABS*	00000000 __flash_rodata_start
00008214 g     F .text	00000020 alt_irq_init
00008504 g     O .bss	00000004 alt_argc
000084ec g     O .rwdata	00000004 switchs
00008020 g       *ABS*	00000000 __ram_exceptions_start
000084f8 g       *ABS*	00000000 _edata
00008510 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
0000800c g       .entry	00000000 exit
00008400 g     F .text	00000060 __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
0000800c g       .entry	00000000 _exit
00008304 g     F .text	00000020 strlen
000082f8 g     F .text	00000004 alt_icache_flush_all
0000813c g     F .text	0000006c alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def40014 	ori	sp,sp,53248

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6813b14 	ori	gp,gp,1260
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a14114 	ori	r2,r2,34052

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e14414 	ori	r3,r3,34064

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	000813c0 	call	813c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00081a80 	call	81a8 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <main>:
#include <stdio.h>

volatile char* switchs = SWITCH_BASE;
char* leds = LEDS_BASE;
int main()
{ 
    805c:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
    8060:	01000074 	movhi	r4,1
    8064:	21212a04 	addi	r4,r4,-31576
#include <stdio.h>

volatile char* switchs = SWITCH_BASE;
char* leds = LEDS_BASE;
int main()
{ 
    8068:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
    806c:	00081d40 	call	81d4 <alt_putstr>
  /* Event loop never exits. */
  while (1){

	  //*leds=* switchs;

	  switch(*switchs&0x3)
    8070:	d0a00017 	ldw	r2,-32768(gp)
    8074:	01400044 	movi	r5,1
    8078:	10800003 	ldbu	r2,0(r2)
    807c:	10c000cc 	andi	r3,r2,3
    8080:	19400d26 	beq	r3,r5,80b8 <main+0x5c>
    8084:	28c00216 	blt	r5,r3,8090 <main+0x34>
    8088:	18000626 	beq	r3,zero,80a4 <main+0x48>
    808c:	00001a06 	br	80f8 <main+0x9c>
    8090:	00800084 	movi	r2,2
    8094:	18800b26 	beq	r3,r2,80c4 <main+0x68>
    8098:	008000c4 	movi	r2,3
    809c:	1880161e 	bne	r3,r2,80f8 <main+0x9c>
    80a0:	00000f06 	br	80e0 <main+0x84>
	  	  {
	  	  	  case 0: *leds=1;alt_putstr("case 0\n");break;
    80a4:	d0a00117 	ldw	r2,-32764(gp)
    80a8:	01000074 	movhi	r4,1
    80ac:	21213004 	addi	r4,r4,-31552
    80b0:	11400005 	stb	r5,0(r2)
    80b4:	00001406 	br	8108 <main+0xac>
	  	  	  case 1: *leds=0;alt_putstr("case 1\n");break;
    80b8:	01000074 	movhi	r4,1
    80bc:	21213204 	addi	r4,r4,-31544
    80c0:	00000f06 	br	8100 <main+0xa4>
	  	  	  case 2: *leds=*leds +1;alt_putstr("case 2\n");break;
    80c4:	d0e00117 	ldw	r3,-32764(gp)
    80c8:	01000074 	movhi	r4,1
    80cc:	21213404 	addi	r4,r4,-31536
    80d0:	18800003 	ldbu	r2,0(r3)
    80d4:	10800044 	addi	r2,r2,1
    80d8:	18800005 	stb	r2,0(r3)
    80dc:	00000a06 	br	8108 <main+0xac>
	  	  	  case 3: *leds=0xFF;alt_putstr("case 3\n");break;
    80e0:	d0a00117 	ldw	r2,-32764(gp)
    80e4:	00ffffc4 	movi	r3,-1
    80e8:	01000074 	movhi	r4,1
    80ec:	21213604 	addi	r4,r4,-31528
    80f0:	10c00005 	stb	r3,0(r2)
    80f4:	00000406 	br	8108 <main+0xac>
	  	  	  default: *leds=0;alt_putstr("default\n");break;
    80f8:	01000074 	movhi	r4,1
    80fc:	21213804 	addi	r4,r4,-31520
    8100:	d0a00117 	ldw	r2,-32764(gp)
    8104:	10000005 	stb	zero,0(r2)
    8108:	00081d40 	call	81d4 <alt_putstr>

	  	  }
	  usleep(1000000);
    810c:	010003f4 	movhi	r4,15
    8110:	21109004 	addi	r4,r4,16960
    8114:	000820c0 	call	820c <usleep>
    8118:	003fd506 	br	8070 <main+0x14>

0000811c <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    811c:	2900051e 	bne	r5,r4,8134 <alt_load_section+0x18>
    8120:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    8124:	20800017 	ldw	r2,0(r4)
    8128:	21000104 	addi	r4,r4,4
    812c:	28800015 	stw	r2,0(r5)
    8130:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8134:	29bffb1e 	bne	r5,r6,8124 <alt_load_section+0x8>
    8138:	f800283a 	ret

0000813c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    813c:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8140:	01000074 	movhi	r4,1
    8144:	21213e04 	addi	r4,r4,-31496
    8148:	01400074 	movhi	r5,1
    814c:	29613b04 	addi	r5,r5,-31508
    8150:	01800074 	movhi	r6,1
    8154:	31a13e04 	addi	r6,r6,-31496
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8158:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    815c:	000811c0 	call	811c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8160:	01000074 	movhi	r4,1
    8164:	21200804 	addi	r4,r4,-32736
    8168:	01400074 	movhi	r5,1
    816c:	29600804 	addi	r5,r5,-32736
    8170:	01800074 	movhi	r6,1
    8174:	31a00804 	addi	r6,r6,-32736
    8178:	000811c0 	call	811c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    817c:	01000074 	movhi	r4,1
    8180:	21212a04 	addi	r4,r4,-31576
    8184:	01400074 	movhi	r5,1
    8188:	29612a04 	addi	r5,r5,-31576
    818c:	01800074 	movhi	r6,1
    8190:	31a13b04 	addi	r6,r6,-31508
    8194:	000811c0 	call	811c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8198:	00082f40 	call	82f4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    819c:	dfc00017 	ldw	ra,0(sp)
    81a0:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    81a4:	00082f81 	jmpi	82f8 <alt_icache_flush_all>

000081a8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    81a8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    81ac:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    81b0:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    81b4:	00082140 	call	8214 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    81b8:	00082100 	call	8210 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    81bc:	d1200617 	ldw	r4,-32744(gp)
    81c0:	d1600717 	ldw	r5,-32740(gp)
    81c4:	d1a00817 	ldw	r6,-32736(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    81c8:	dfc00017 	ldw	ra,0(sp)
    81cc:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    81d0:	000805c1 	jmpi	805c <main>

000081d4 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    81d4:	defffe04 	addi	sp,sp,-8
    81d8:	dc000015 	stw	r16,0(sp)
    81dc:	dfc00115 	stw	ra,4(sp)
    81e0:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    81e4:	00083040 	call	8304 <strlen>
    81e8:	800b883a 	mov	r5,r16
    81ec:	100d883a 	mov	r6,r2
    81f0:	01000074 	movhi	r4,1
    81f4:	21213d04 	addi	r4,r4,-31500
    81f8:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
    81fc:	dfc00117 	ldw	ra,4(sp)
    8200:	dc000017 	ldw	r16,0(sp)
    8204:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8208:	00082341 	jmpi	8234 <altera_avalon_jtag_uart_write>

0000820c <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    820c:	00082681 	jmpi	8268 <alt_busy_sleep>

00008210 <alt_sys_init>:

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_SYSID_INIT ( SYSID_0, sysid_0);
}
    8210:	f800283a 	ret

00008214 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8214:	deffff04 	addi	sp,sp,-4
    8218:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
    821c:	00082fc0 	call	82fc <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8220:	00800044 	movi	r2,1
    8224:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8228:	dfc00017 	ldw	ra,0(sp)
    822c:	dec00104 	addi	sp,sp,4
    8230:	f800283a 	ret

00008234 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    8234:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
    8238:	298f883a 	add	r7,r5,r6
    823c:	20c00104 	addi	r3,r4,4
    8240:	00000606 	br	825c <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8244:	18800037 	ldwio	r2,0(r3)
    8248:	10bfffec 	andhi	r2,r2,65535
    824c:	10000326 	beq	r2,zero,825c <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8250:	28800007 	ldb	r2,0(r5)
    8254:	29400044 	addi	r5,r5,1
    8258:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    825c:	29fff936 	bltu	r5,r7,8244 <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    8260:	3005883a 	mov	r2,r6
    8264:	f800283a 	ret

00008268 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    8268:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    826c:	014666b4 	movhi	r5,6554
    8270:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    8274:	dc000015 	stw	r16,0(sp)
    8278:	dfc00115 	stw	ra,4(sp)
    827c:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8280:	00084600 	call	8460 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    8284:	10001126 	beq	r2,zero,82cc <alt_busy_sleep+0x64>
    8288:	0007883a 	mov	r3,zero
    828c:	01200034 	movhi	r4,32768
    8290:	213fffc4 	addi	r4,r4,-1
    8294:	017999b4 	movhi	r5,58982
    8298:	295999c4 	addi	r5,r5,26215
    829c:	00000406 	br	82b0 <alt_busy_sleep+0x48>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    82a0:	213fffc4 	addi	r4,r4,-1
    82a4:	203ffe1e 	bne	r4,zero,82a0 <alt_busy_sleep+0x38>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    82a8:	8161883a 	add	r16,r16,r5
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    82ac:	18c00044 	addi	r3,r3,1
    82b0:	18bffb16 	blt	r3,r2,82a0 <alt_busy_sleep+0x38>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    82b4:	8009883a 	mov	r4,r16
    82b8:	01400144 	movi	r5,5
    82bc:	00084700 	call	8470 <__mulsi3>
    82c0:	10bfffc4 	addi	r2,r2,-1
    82c4:	103ffe1e 	bne	r2,zero,82c0 <alt_busy_sleep+0x58>
    82c8:	00000506 	br	82e0 <alt_busy_sleep+0x78>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    82cc:	8009883a 	mov	r4,r16
    82d0:	01400144 	movi	r5,5
    82d4:	00084700 	call	8470 <__mulsi3>
    82d8:	10bfffc4 	addi	r2,r2,-1
    82dc:	00bffe16 	blt	zero,r2,82d8 <alt_busy_sleep+0x70>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    82e0:	0005883a 	mov	r2,zero
    82e4:	dfc00117 	ldw	ra,4(sp)
    82e8:	dc000017 	ldw	r16,0(sp)
    82ec:	dec00204 	addi	sp,sp,8
    82f0:	f800283a 	ret

000082f4 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    82f4:	f800283a 	ret

000082f8 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    82f8:	f800283a 	ret

000082fc <altera_nios2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    82fc:	000170fa 	wrctl	ienable,zero
}
    8300:	f800283a 	ret

00008304 <strlen>:
    8304:	20800007 	ldb	r2,0(r4)
    8308:	10000526 	beq	r2,zero,8320 <strlen+0x1c>
    830c:	2007883a 	mov	r3,r4
    8310:	18c00044 	addi	r3,r3,1
    8314:	18800007 	ldb	r2,0(r3)
    8318:	103ffd1e 	bne	r2,zero,8310 <strlen+0xc>
    831c:	1905c83a 	sub	r2,r3,r4
    8320:	f800283a 	ret

00008324 <udivmodsi4>:
    8324:	29001b2e 	bgeu	r5,r4,8394 <udivmodsi4+0x70>
    8328:	28001a16 	blt	r5,zero,8394 <udivmodsi4+0x70>
    832c:	00800044 	movi	r2,1
    8330:	0007883a 	mov	r3,zero
    8334:	01c007c4 	movi	r7,31
    8338:	00000306 	br	8348 <udivmodsi4+0x24>
    833c:	19c01326 	beq	r3,r7,838c <udivmodsi4+0x68>
    8340:	18c00044 	addi	r3,r3,1
    8344:	28000416 	blt	r5,zero,8358 <udivmodsi4+0x34>
    8348:	294b883a 	add	r5,r5,r5
    834c:	1085883a 	add	r2,r2,r2
    8350:	293ffa36 	bltu	r5,r4,833c <udivmodsi4+0x18>
    8354:	10000d26 	beq	r2,zero,838c <udivmodsi4+0x68>
    8358:	0007883a 	mov	r3,zero
    835c:	21400236 	bltu	r4,r5,8368 <udivmodsi4+0x44>
    8360:	2149c83a 	sub	r4,r4,r5
    8364:	1886b03a 	or	r3,r3,r2
    8368:	1004d07a 	srli	r2,r2,1
    836c:	280ad07a 	srli	r5,r5,1
    8370:	103ffa1e 	bne	r2,zero,835c <udivmodsi4+0x38>
    8374:	30000226 	beq	r6,zero,8380 <udivmodsi4+0x5c>
    8378:	2005883a 	mov	r2,r4
    837c:	f800283a 	ret
    8380:	1809883a 	mov	r4,r3
    8384:	2005883a 	mov	r2,r4
    8388:	f800283a 	ret
    838c:	0007883a 	mov	r3,zero
    8390:	003ff806 	br	8374 <udivmodsi4+0x50>
    8394:	00800044 	movi	r2,1
    8398:	0007883a 	mov	r3,zero
    839c:	003fef06 	br	835c <udivmodsi4+0x38>

000083a0 <__divsi3>:
    83a0:	defffe04 	addi	sp,sp,-8
    83a4:	dc000015 	stw	r16,0(sp)
    83a8:	dfc00115 	stw	ra,4(sp)
    83ac:	0021883a 	mov	r16,zero
    83b0:	20000c16 	blt	r4,zero,83e4 <__divsi3+0x44>
    83b4:	000d883a 	mov	r6,zero
    83b8:	28000e16 	blt	r5,zero,83f4 <__divsi3+0x54>
    83bc:	00083240 	call	8324 <udivmodsi4>
    83c0:	1007883a 	mov	r3,r2
    83c4:	8005003a 	cmpeq	r2,r16,zero
    83c8:	1000011e 	bne	r2,zero,83d0 <__divsi3+0x30>
    83cc:	00c7c83a 	sub	r3,zero,r3
    83d0:	1805883a 	mov	r2,r3
    83d4:	dfc00117 	ldw	ra,4(sp)
    83d8:	dc000017 	ldw	r16,0(sp)
    83dc:	dec00204 	addi	sp,sp,8
    83e0:	f800283a 	ret
    83e4:	0109c83a 	sub	r4,zero,r4
    83e8:	04000044 	movi	r16,1
    83ec:	000d883a 	mov	r6,zero
    83f0:	283ff20e 	bge	r5,zero,83bc <__divsi3+0x1c>
    83f4:	014bc83a 	sub	r5,zero,r5
    83f8:	8021003a 	cmpeq	r16,r16,zero
    83fc:	003fef06 	br	83bc <__divsi3+0x1c>

00008400 <__modsi3>:
    8400:	deffff04 	addi	sp,sp,-4
    8404:	dfc00015 	stw	ra,0(sp)
    8408:	01800044 	movi	r6,1
    840c:	2807883a 	mov	r3,r5
    8410:	20000416 	blt	r4,zero,8424 <__modsi3+0x24>
    8414:	28000c16 	blt	r5,zero,8448 <__modsi3+0x48>
    8418:	dfc00017 	ldw	ra,0(sp)
    841c:	dec00104 	addi	sp,sp,4
    8420:	00083241 	jmpi	8324 <udivmodsi4>
    8424:	0109c83a 	sub	r4,zero,r4
    8428:	28000b16 	blt	r5,zero,8458 <__modsi3+0x58>
    842c:	180b883a 	mov	r5,r3
    8430:	01800044 	movi	r6,1
    8434:	00083240 	call	8324 <udivmodsi4>
    8438:	0085c83a 	sub	r2,zero,r2
    843c:	dfc00017 	ldw	ra,0(sp)
    8440:	dec00104 	addi	sp,sp,4
    8444:	f800283a 	ret
    8448:	014bc83a 	sub	r5,zero,r5
    844c:	dfc00017 	ldw	ra,0(sp)
    8450:	dec00104 	addi	sp,sp,4
    8454:	00083241 	jmpi	8324 <udivmodsi4>
    8458:	0147c83a 	sub	r3,zero,r5
    845c:	003ff306 	br	842c <__modsi3+0x2c>

00008460 <__udivsi3>:
    8460:	000d883a 	mov	r6,zero
    8464:	00083241 	jmpi	8324 <udivmodsi4>

00008468 <__umodsi3>:
    8468:	01800044 	movi	r6,1
    846c:	00083241 	jmpi	8324 <udivmodsi4>

00008470 <__mulsi3>:
    8470:	20000a26 	beq	r4,zero,849c <__mulsi3+0x2c>
    8474:	0007883a 	mov	r3,zero
    8478:	2080004c 	andi	r2,r4,1
    847c:	1005003a 	cmpeq	r2,r2,zero
    8480:	2008d07a 	srli	r4,r4,1
    8484:	1000011e 	bne	r2,zero,848c <__mulsi3+0x1c>
    8488:	1947883a 	add	r3,r3,r5
    848c:	294b883a 	add	r5,r5,r5
    8490:	203ff91e 	bne	r4,zero,8478 <__mulsi3+0x8>
    8494:	1805883a 	mov	r2,r3
    8498:	f800283a 	ret
    849c:	0007883a 	mov	r3,zero
    84a0:	1805883a 	mov	r2,r3
    84a4:	f800283a 	ret
